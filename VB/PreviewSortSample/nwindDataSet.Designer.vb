'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5446
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
Namespace PreviewSortSample

    ''' <summary>
    ''' Represents a strongly typed in-memory cache of data.
    ''' </summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
    <Global.System.SerializableAttribute()>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code")>
    <Global.System.ComponentModel.ToolboxItemAttribute(True)>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")>
    <Global.System.Xml.Serialization.XmlRootAttribute("nwindDataSet")>
    <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>
    Public Partial Class nwindDataSet
        Inherits Global.System.Data.DataSet

        Private tableOrderDetails As PreviewSortSample.nwindDataSet.OrderDetailsDataTable

        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Sub New()
            Me.BeginInit()
            Me.InitClass()
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, False)
            If(Me.IsBinarySerialized(info, context) = True) Then
                Me.InitVars(False)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If

            Dim strSchema As String =(CStr((info.GetValue("XmlSchema", GetType(String)))))
            If(Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If(ds.Tables("OrderDetails") IsNot Nothing) Then
                    MyBase.Tables.Add(New PreviewSortSample.nwindDataSet.OrderDetailsDataTable(ds.Tables("OrderDetails")))
                End If

                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.[Namespace] = ds.[Namespace]
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If

            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.BrowsableAttribute(False)>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
        Public ReadOnly Property OrderDetails As OrderDetailsDataTable
            Get
                Return Me.tableOrderDetails
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.BrowsableAttribute(True)>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>
        Public Overrides Property SchemaSerializationMode As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get

            Set(ByVal value As Global.System.Data.SchemaSerializationMode)
                Me._schemaSerializationMode = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>
        Public Overloads ReadOnly Property Tables As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>
        Public Overloads ReadOnly Property Relations As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As PreviewSortSample.nwindDataSet = CType((MyBase.Clone()), PreviewSortSample.nwindDataSet)
            cln.InitVars()
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If(Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset()
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If(ds.Tables("OrderDetails") IsNot Nothing) Then
                    MyBase.Tables.Add(New PreviewSortSample.nwindDataSet.OrderDetailsDataTable(ds.Tables("OrderDetails")))
                End If

                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.[Namespace] = ds.[Namespace]
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXml(reader)
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Friend Sub InitVars()
            Me.InitVars(True)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Friend Sub InitVars(ByVal initTable As Boolean)
            Me.tableOrderDetails = CType((MyBase.Tables("OrderDetails")), PreviewSortSample.nwindDataSet.OrderDetailsDataTable)
            If(initTable = True) Then
                If(Me.tableOrderDetails IsNot Nothing) Then
                    Me.tableOrderDetails.InitVars()
                End If
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub InitClass()
            Me.DataSetName = "nwindDataSet"
            Me.Prefix = ""
            Me.[Namespace] = "http://tempuri.org/nwindDataSet.xsd"
            Me.EnforceConstraints = True
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableOrderDetails = New PreviewSortSample.nwindDataSet.OrderDetailsDataTable()
            MyBase.Tables.Add(Me.tableOrderDetails)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Function ShouldSerializeOrderDetails() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If(e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As PreviewSortSample.nwindDataSet = New PreviewSortSample.nwindDataSet()
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any.[Namespace] = ds.[Namespace]
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(CStr((dsSchema.TargetNamespace))).GetEnumerator()
                    While schemas.MoveNext()
                        schema = CType((schemas.Current), Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If(s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            While((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))
                            End While

                            If(s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                    End While
                Finally
                    If(s1 IsNot Nothing) Then
                        s1.Close()
                    End If

                    If(s2 IsNot Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If

            xs.Add(dsSchema)
            Return type
        End Function

        Public Delegate Sub OrderDetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As PreviewSortSample.nwindDataSet.OrderDetailsRowChangeEvent)

        ''' <summary>
        ''' Represents the strongly named DataTable class.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
        <Global.System.SerializableAttribute()>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
        Public Partial Class OrderDetailsDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable

            Private columnOrderID As Global.System.Data.DataColumn

            Private columnQuantity As Global.System.Data.DataColumn

            Private columnUnitPrice As Global.System.Data.DataColumn

            Private columnDiscount As Global.System.Data.DataColumn

            Private columnProductName As Global.System.Data.DataColumn

            Private columnSupplier As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub New()
                Me.TableName = "OrderDetails"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If(table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If

                If(Not Equals(table.Locale.ToString(), table.DataSet.Locale.ToString())) Then
                    Me.Locale = table.Locale
                End If

                If(Not Equals(table.[Namespace], table.DataSet.[Namespace])) Then
                    Me.[Namespace] = table.[Namespace]
                End If

                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property OrderIDColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnOrderID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property QuantityColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnQuantity
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property UnitPriceColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnUnitPrice
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property DiscountColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnDiscount
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property ProductNameColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnProductName
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property SupplierColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnSupplier
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.ComponentModel.BrowsableAttribute(False)>
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Default Public ReadOnly Property Item(ByVal index As Integer) As OrderDetailsRow
                Get
                    Return CType((Me.Rows(index)), PreviewSortSample.nwindDataSet.OrderDetailsRow)
                End Get
            End Property

            Public Event OrderDetailsRowChanging As PreviewSortSample.nwindDataSet.OrderDetailsRowChangeEventHandler

            Public Event OrderDetailsRowChanged As PreviewSortSample.nwindDataSet.OrderDetailsRowChangeEventHandler

            Public Event OrderDetailsRowDeleting As PreviewSortSample.nwindDataSet.OrderDetailsRowChangeEventHandler

            Public Event OrderDetailsRowDeleted As PreviewSortSample.nwindDataSet.OrderDetailsRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub AddOrderDetailsRow(ByVal row As PreviewSortSample.nwindDataSet.OrderDetailsRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function AddOrderDetailsRow(ByVal OrderID As Integer, ByVal Quantity As Short, ByVal UnitPrice As Decimal, ByVal Discount As Single, ByVal ProductName As String, ByVal Supplier As String) As OrderDetailsRow
                Dim rowOrderDetailsRow As PreviewSortSample.nwindDataSet.OrderDetailsRow = CType((Me.NewRow()), PreviewSortSample.nwindDataSet.OrderDetailsRow)
                Dim columnValuesArray As Object() = New Object() {OrderID, Quantity, UnitPrice, Discount, ProductName, Supplier}
                rowOrderDetailsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowOrderDetailsRow)
                Return rowOrderDetailsRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As PreviewSortSample.nwindDataSet.OrderDetailsDataTable = CType((MyBase.Clone()), PreviewSortSample.nwindDataSet.OrderDetailsDataTable)
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New PreviewSortSample.nwindDataSet.OrderDetailsDataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Friend Sub InitVars()
                Me.columnOrderID = Me.Columns("OrderID")
                Me.columnQuantity = Me.Columns("Quantity")
                Me.columnUnitPrice = Me.Columns("UnitPrice")
                Me.columnDiscount = Me.Columns("Discount")
                Me.columnProductName = Me.Columns("ProductName")
                Me.columnSupplier = Me.Columns("Supplier")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Private Sub InitClass()
                Me.columnOrderID = New Global.System.Data.DataColumn("OrderID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnOrderID)
                Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnQuantity)
                Me.columnUnitPrice = New Global.System.Data.DataColumn("UnitPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnUnitPrice)
                Me.columnDiscount = New Global.System.Data.DataColumn("Discount", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnDiscount)
                Me.columnProductName = New Global.System.Data.DataColumn("ProductName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnProductName)
                Me.columnSupplier = New Global.System.Data.DataColumn("Supplier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnSupplier)
                Me.columnProductName.MaxLength = 40
                Me.columnSupplier.[ReadOnly] = True
                Me.columnSupplier.MaxLength = 255
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function NewOrderDetailsRow() As OrderDetailsRow
                Return CType((Me.NewRow()), PreviewSortSample.nwindDataSet.OrderDetailsRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New PreviewSortSample.nwindDataSet.OrderDetailsRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(PreviewSortSample.nwindDataSet.OrderDetailsRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent OrderDetailsRowChanged(Me, New PreviewSortSample.nwindDataSet.OrderDetailsRowChangeEvent(CType((e.Row), PreviewSortSample.nwindDataSet.OrderDetailsRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent OrderDetailsRowChanging(Me, New PreviewSortSample.nwindDataSet.OrderDetailsRowChangeEvent(CType((e.Row), PreviewSortSample.nwindDataSet.OrderDetailsRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent OrderDetailsRowDeleted(Me, New PreviewSortSample.nwindDataSet.OrderDetailsRowChangeEvent(CType((e.Row), PreviewSortSample.nwindDataSet.OrderDetailsRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent OrderDetailsRowDeleting(Me, New PreviewSortSample.nwindDataSet.OrderDetailsRowChangeEvent(CType((e.Row), PreviewSortSample.nwindDataSet.OrderDetailsRow), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub RemoveOrderDetailsRow(ByVal row As PreviewSortSample.nwindDataSet.OrderDetailsRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As PreviewSortSample.nwindDataSet = New PreviewSortSample.nwindDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.[Namespace] = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.[Namespace] = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.[Namespace]
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "OrderDetailsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(CStr((dsSchema.TargetNamespace))).GetEnumerator()
                        While schemas.MoveNext()
                            schema = CType((schemas.Current), Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If(s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                While((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))
                                End While

                                If(s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        End While
                    Finally
                        If(s1 IsNot Nothing) Then
                            s1.Close()
                        End If

                        If(s2 IsNot Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If

                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        ''' Represents strongly named DataRow class.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
        Public Partial Class OrderDetailsRow
            Inherits Global.System.Data.DataRow

            Private tableOrderDetails As PreviewSortSample.nwindDataSet.OrderDetailsDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableOrderDetails = CType((Me.Table), PreviewSortSample.nwindDataSet.OrderDetailsDataTable)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property OrderID As Integer
                Get
                    Try
                        Return(CInt((Me(Me.tableOrderDetails.OrderIDColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'OrderID' in table 'OrderDetails' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As Integer)
                    Me(Me.tableOrderDetails.OrderIDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property Quantity As Short
                Get
                    Try
                        Return(CShort((Me(Me.tableOrderDetails.QuantityColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'OrderDetails' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As Short)
                    Me(Me.tableOrderDetails.QuantityColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property UnitPrice As Decimal
                Get
                    Try
                        Return(CDec((Me(Me.tableOrderDetails.UnitPriceColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'UnitPrice' in table 'OrderDetails' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As Decimal)
                    Me(Me.tableOrderDetails.UnitPriceColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property Discount As Single
                Get
                    Try
                        Return(CSng((Me(Me.tableOrderDetails.DiscountColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Discount' in table 'OrderDetails' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As Single)
                    Me(Me.tableOrderDetails.DiscountColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property ProductName As String
                Get
                    Try
                        Return(CStr((Me(Me.tableOrderDetails.ProductNameColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ProductName' in table 'OrderDetails' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As String)
                    Me(Me.tableOrderDetails.ProductNameColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property Supplier As String
                Get
                    Try
                        Return(CStr((Me(Me.tableOrderDetails.SupplierColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier' in table 'OrderDetails' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As String)
                    Me(Me.tableOrderDetails.SupplierColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsOrderIDNull() As Boolean
                Return Me.IsNull(Me.tableOrderDetails.OrderIDColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetOrderIDNull()
                Me(Me.tableOrderDetails.OrderIDColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsQuantityNull() As Boolean
                Return Me.IsNull(Me.tableOrderDetails.QuantityColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetQuantityNull()
                Me(Me.tableOrderDetails.QuantityColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsUnitPriceNull() As Boolean
                Return Me.IsNull(Me.tableOrderDetails.UnitPriceColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetUnitPriceNull()
                Me(Me.tableOrderDetails.UnitPriceColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsDiscountNull() As Boolean
                Return Me.IsNull(Me.tableOrderDetails.DiscountColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetDiscountNull()
                Me(Me.tableOrderDetails.DiscountColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsProductNameNull() As Boolean
                Return Me.IsNull(Me.tableOrderDetails.ProductNameColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetProductNameNull()
                Me(Me.tableOrderDetails.ProductNameColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsSupplierNull() As Boolean
                Return Me.IsNull(Me.tableOrderDetails.SupplierColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetSupplierNull()
                Me(Me.tableOrderDetails.SupplierColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        ''' Row event argument class
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
        Public Class OrderDetailsRowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As PreviewSortSample.nwindDataSet.OrderDetailsRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub New(ByVal row As PreviewSortSample.nwindDataSet.OrderDetailsRow, ByVal action As Global.System.Data.DataRowAction)
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property Row As OrderDetailsRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property Action As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace

Namespace PreviewSortSample.nwindDataSetTableAdapters

    ''' <summary>
    ''' Represents the connection and commands used to retrieve and save data.
    ''' </summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code")>
    <Global.System.ComponentModel.ToolboxItemAttribute(True)>
    <Global.System.ComponentModel.DataObjectAttribute(True)>
    <Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")>
    <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Partial Class OrderDetailsTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

        Private _connection As Global.System.Data.OleDb.OleDbConnection

        Private _commandCollection As Global.System.Data.OleDb.OleDbCommand()

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Sub New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private ReadOnly Property Adapter As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If(Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If

                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Friend Property Connection As Global.System.Data.OleDb.OleDbConnection
            Get
                If(Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If

                Return Me._connection
            End Get

            Set(ByVal value As Global.System.Data.OleDb.OleDbConnection)
                Me._connection = value
                If(Me.Adapter.InsertCommand IsNot Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If

                If(Me.Adapter.DeleteCommand IsNot Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If

                If(Me.Adapter.UpdateCommand IsNot Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If

                Dim i As Integer = 0
                While(i < Me.CommandCollection.Length)
                    If(Me.CommandCollection(i) IsNot Nothing) Then
                        CType((Me.CommandCollection(CInt((i)))), Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If

                    i =(i + 1)
                End While
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected ReadOnly Property CommandCollection As Global.System.Data.OleDb.OleDbCommand()
            Get
                If(Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If

                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Property ClearBeforeFill As Boolean
            Get
                Return Me._clearBeforeFill
            End Get

            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "OrderDetails"
            tableMapping.ColumnMappings.Add("OrderID", "OrderID")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice")
            tableMapping.ColumnMappings.Add("Discount", "Discount")
            tableMapping.ColumnMappings.Add("ProductName", "ProductName")
            tableMapping.ColumnMappings.Add("Supplier", "Supplier")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.PreviewSortSample.Properties.Settings.[Default].nwindConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(CInt((0))).Connection = Me.Connection
            Me._commandCollection(CInt((0))).CommandText = "SELECT        OrderID, Quantity, UnitPrice, Discount, ProductName, Supplier" & Global.Microsoft.VisualBasic.Constants.vbCrLf & "FROM" & "            OrderDetails" & Global.Microsoft.VisualBasic.Constants.vbCrLf & "WHERE        (OrderID = :ordID)"
            Me._commandCollection(CInt((0))).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(CInt((0))).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ordId", Global.System.Data.OleDb.OleDbType.[Integer], 1, Global.System.Data.ParameterDirection.Input, (CByte((0))), (CByte((0))), Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
        Public Overridable Function Fill(ByVal dataTable As PreviewSortSample.nwindDataSet.OrderDetailsDataTable, ByVal ordId As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(CInt((0))).Value =(CInt((ordId)))
            If(Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If

            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)>
        Public Overridable Function GetData(ByVal ordId As Integer) As PreviewSortSample.nwindDataSet.OrderDetailsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(CInt((0))).Value =(CInt((ordId)))
            Dim dataTable As PreviewSortSample.nwindDataSet.OrderDetailsDataTable = New PreviewSortSample.nwindDataSet.OrderDetailsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
